name: API TEST DEPLOY
on:
  push:
    branches:
      - live-test

  workflow_dispatch:

jobs:
  build:
    name: Build and push
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.extract_branch.outputs.branch }}
      tag: ${{steps.extract_tag.outputs.tag}}
      version: ${{steps.extract_version.outputs.version}}
    steps:
      - uses: actions/checkout@v2

      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      - name: Extract version
        shell: bash
        run: echo "##[set-output name=version;]$(cat .api-version)"
        id: extract_version

      - name: Extract ECR tag
        shell: bash
        run: echo "##[set-output name=tag;]$(echo ${BRANCH}-${SHA}-${VERSION})"
        id: extract_tag
        env:
          BRANCH: ${{ steps.extract_branch.outputs.branch }}
          VERSION: ${{ steps.extract_version.outputs.version }}
          SHA: ${{ github.sha }}

      - name: Generate .ENV
        run: |
          export DATABASE_URL="${{ secrets.TEST_DATABASE_URL }}"
          export JWT_SECRET="${{ secrets.JWT_SECRET }}"
          export FILE_SYSTEM="aws"
          export PORT=${{ secrets.API_PORT }}
          export NODE_ENV="production"
          envsubst < .env.template > .env

      # This is the a separate action that sets up buildx runner
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      # So now you can use Actions' own caching!
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # And make it available for the builds
      - name: Build Docker
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile.api
          push: false
          tags: my-image
          load: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
        # This ugly bit is necessary if you don't want your cache to grow forever
        # till it hits GitHub's limit of 5GB.
        # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Push to ECR
        uses: jwalton/gh-ecr-push@v1
        with:
          access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          region: eu-central-1
          local-image: my-image
          image: api:${{steps.extract_tag.outputs.tag}}

  deploy:
    name: Deploy to Elastic Beanstalk
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v2
      - name: Package Dockerrun.aws.json
        run: |
          sed -i -e "s|@REPO|$REPO|g" Dockerrun.aws.json
          sed -i -e "s|@TAG|$TAG|g" Dockerrun.aws.json
          zip -r "deploy.zip" Dockerrun.aws.json
        env:
          REPO: ${{ secrets.API_ECR_REPOSITORY }}
          TAG: ${{ needs.build.outputs.tag }}
      - name: Get timestamp
        shell: bash
        run: echo "##[set-output name=timestamp;]$(env TZ=Europe/Istanbul date '+%Y%m%d%H%M%S')"
        id: get_timestamp
      - name: Get Elastic Beanstalk label
        shell: bash
        run: echo "##[set-output name=label;]$(echo ${TAG}-${TIMESTAMP})"
        id: get_label
        env:
          TAG: ${{ needs.build.outputs.tag }}
          TIMESTAMP: ${{ steps.get_timestamp.outputs.timestamp }}
      - name: Deploy to EB
        uses: einaregilsson/beanstalk-deploy@v18
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: tradist-api
          environment_name: tradist-api-docker-env
          version_label: ${{ steps.get_label.outputs.label }}
          region: eu-central-1
          deployment_package: deploy.zip
          existing_bucket_name: tradist-docker

  # dockerize_push:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Prepare Environment
  #       uses: actions/checkout@v2
  #     - uses: actions/setup-node@v2
  #       with:
  #         node-version: "16"
  #         cache: "yarn"

  #     # This is the a separate action that sets up buildx runner
  #     - name: Set up Docker Buildx
  #       id: buildx
  #       uses: docker/setup-buildx-action@v1
  #     # So now you can use Actions' own caching!
  #     - name: Cache Docker layers
  #       uses: actions/cache@v2
  #       with:
  #         path: /tmp/.buildx-cache
  #         key: ${{ runner.os }}-buildx-${{ github.sha }}
  #         restore-keys: |
  #           ${{ runner.os }}-buildx-

  #     - name: Generate .ENV
  #       run: |
  #         export DATABASE_URL="${{ secrets.TEST_DATABASE_URL }}"
  #         export JWT_SECRET="${{ secrets.JWT_SECRET }}"
  #         export NODE_ENV="production"
  #         envsubst < .env.template > .env

  #     # - name: Configure AWS credentials
  #     #   uses: aws-actions/configure-aws-credentials@v1
  #     #   with:
  #     #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #     #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #     #     aws-region: eu-central-1

  #     - name: Prepare for docker build and aws deploy
  #       id: prep
  #       run: |
  #         VERSION=v$(cat .api-version)
  #         IMAGE_TAG="ghcr.io/tradist-web/api:$VERSION"
  #         echo ::set-output name=tagged_image::${IMAGE_TAG}
  #         echo ::set-output name=version::${VERSION}
  #         envsubst < Dockerrun.aws.template.json > Dockerrun.aws.json

  #     # - name: Login to ghcr
  #     #   uses: docker/login-action@v1
  #     #   with:
  #     #     registry: ghcr.io
  #     #     username: ${{ github.repository_owner }}
  #     #     password: ${{ secrets.GITHUB_TOKEN }}

  #     # - name: Docker Build and push
  #     #   uses: docker/build-push-action@v2
  #     #   with:
  #     #     context: .
  #     #     builder: ${{ steps.buildx.outputs.name }}
  #     #     file: ./Dockerfile.api
  #     #     push: true
  #     #     tags: ${{ steps.prep.outputs.tagged_image }}
  #     #     cache-from: type=local,src=/tmp/.buildx-cache
  #     #     cache-to: type=local,dest=/tmp/.buildx-cache-new

  #     - name: Generate deployment package
  #       run: zip deploy.zip Dockerrun.aws.json

  #     - name: Deploy to AWS
  #       uses: einaregilsson/beanstalk-deploy@v18
  #       with:
  #         aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         application_name: tradist-api
  #         environment_name: tradist-api-docker-env
  #         version_label: ${{ steps.prep.outputs.version }}
  #         region: eu-central-1
  #         deployment_package: deploy.zip
  #         existing_bucket_name: tradist-asset

  #       # This ugly bit is necessary if you don't want your cache to grow forever
  #       # till it hits GitHub's limit of 5GB.
  #       # Temp fix
  #       # https://github.com/docker/build-push-action/issues/252
  #       # https://github.com/moby/buildkit/issues/1896
  #     - name: Move cache
  #       run: |
  #         rm -rf /tmp/.buildx-cache
  #         mv /tmp/.buildx-cache-new /tmp/.buildx-cache
