// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id Int @id @default(autoincrement())

  // properties
  email    String @unique
  password String

  // outbound relations
  bids         Bid[]
  wallets      Wallet[]
  roles        UserRole[]
  won_auctions Auction[]

  // inbound relations

  // autogen columns
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserRole {
  id Int @id @default(autoincrement())

  // properties
  name        String @unique
  description String

  // outbound relations
  users User[]

  // inbound relations
  // autogen columns
}

model Hero {
  id Int @id @default(autoincrement())

  // properties
  title       String
  description String

  // outbound relations
  // inbound relations

  // autogen columns
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id Int @id @default(autoincrement())

  // properties

  // outbound relations
  Bid    Bid[]
  assset Asset[]

  // inbound relations

  // autogen columns
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Auction {
  id Int @id @default(autoincrement())

  // properties
  auctionStartedAt DateTime?
  auctionEndAt     DateTime?

  // outbound relations
  bids Bid[]

  // inbound relations
  winner User? @relation(fields: [userId], references: [id])
  userId Int?


  // autogen columns
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Bid {
  id Int @id @default(autoincrement())

  // properties
  price Decimal

  // outbound relations

  // inbound relations
  bidder    User     @relation(fields: [bidderId], references: id)
  bidderId  Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  Auction   Auction? @relation(fields: [auctionId], references: [id])
  auctionId Int?

  // autogen columns
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Wallet {
  id Int @id @default(autoincrement())

  // properties
  hash String @unique

  // outbound relations

  // inbound relations
  user   User @relation(fields: [userId], references: [id])
  userId Int

  // autogen columns
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Asset {
  id Int @id @default(autoincrement())

  // properties
  folderPath String   @default("")
  name       String
  size       Int
  type       String
  // outbound relations
  // inbound relations
  // autogen columns
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Product    Product? @relation(fields: [productId], references: [id])
  productId  Int?
}

//// OLD ////
// model User {
//   id                   Int             @id @default(autoincrement())
//   email                String?         @unique
//   name                 String?
//   password             String
//   isVerified           Boolean         @default(false)
//   verificationDate     DateTime
//   role                 Role            @relation(fields: [role_id], references: [id])
//   role_id              Int             @default(1)
//   wallet_address       String
//   profile              Profile?
//   followedBy           User[]          @relation("UserFollows", references: [id])
//   following            User[]          @relation("UserFollows", references: [id])
//   erc721Tokens         ERC721[]        @relation("erc721owner")
//   cretedErc721Tokens   ERC721[]        @relation("erc721creator")
//   createdErc1155Tokens ERC1155[]       @relation("erc1155creator")
//   BadgesOnUsers        BadgesOnUsers[]
//   erc1155Tokens        ERC1155Owner[]
//   auctions             Auction[]       @relation("auction_owner")
//   wonAuctions          Auction[]       @relation("auction_winner")
//   bids                 Bid[]
//   UserFavTokens        UserFavTokens[]
//   receivedTransactions Transaction[]   @relation("transactionReceiver")
//   sentTransactions     Transaction[]   @relation("transactionSender")

//   @@map(name: "users")
// }

// model Profile {
//   id         Int    @id @default(autoincrement())
//   bio        String
//   coverImg   String
//   username   String
//   profileImg String
//   user       User   @relation(fields: [userId], references: [id])
//   userId     Int

//   @@map(name: "profiles")
// }

// model Badge {
//   id            Int             @id @default(autoincrement())
//   name          String
//   description   String
//   condition     String
//   image         String
//   BadgesOnUsers BadgesOnUsers[]

//   @@map(name: "badges")
// }

// model BadgesOnUsers {
//   user        User     @relation(fields: [userId], references: [id])
//   userId      Int
//   badge       Badge    @relation(fields: [badgeId], references: [id])
//   badgeId     Int
//   acquireDate DateTime @default(now())

//   @@id([userId, badgeId])
//   @@map("badges_users")
// }

// model ERC721 {
//   id              Int          @id @default(autoincrement())
//   tokenId         Int
//   name            String
//   contractAddress String
//   blockHash       String
//   txHash          String
//   description     String
//   stats           String
//   createdAt       DateTime     @default(now())
//   asset           ERC721Asset?
//   createdBy       User         @relation("erc721creator", fields: [creatorId], references: [id])
//   creatorId       Int
//   owner           User         @relation("erc721owner", fields: [ownerId], references: [id])
//   ownerId         Int
//   price           Float

//   @@map("erc721")
// }

// model ERC721Asset {
//   id        Int      @id @default(autoincrement())
//   token     ERC721   @relation(fields: [tokenId], references: [id])
//   tokenId   Int
//   file_path String
//   ipfs_cid  String
//   type      NFT_TYPE

//   @@map("erc721_assets")
// }

// model ERC1155 {
//   id           Int            @id @default(autoincrement())
//   tokenId      Int
//   blockHash    String
//   txHash       String
//   createdAt    DateTime       @default(now())
//   createdBy    User           @relation("erc1155creator", fields: [creatorId], references: [id])
//   creatorId    Int
//   description  String
//   name         String
//   collectionId Int?
//   totalAmount  Int
//   asset        ERC1155Asset?
//   owners       ERC1155Owner[]

//   @@map("erc1155")
// }

// model ERC1155Asset {
//   id        Int      @id @default(autoincrement())
//   token     ERC1155  @relation(fields: [tokenId], references: [id])
//   tokenId   Int
//   file_path String
//   ipfs_cid  String
//   type      NFT_TYPE

//   @@map("erc1155_assets")
// }

// model ERC1155Owner {
//   token   ERC1155 @relation(fields: [tokenId], references: [id])
//   tokenId Int

//   owner   User @relation(fields: [ownerId], references: [id])
//   ownerId Int

//   amount Int @default(1)

//   @@id([tokenId, ownerId])
//   @@map("erc1155_owners")
// }

// model Token {
//   id            Int             @id @default(autoincrement())
//   tokenId       Int
//   type          TOKEN_TYPE
//   auctions      Auction[]
//   UserFavTokens UserFavTokens[]

//   @@map("tokens")
//   Transaction Transaction[]
// }

// model UserFavTokens {
//   user    User     @relation(fields: [userId], references: [id])
//   userId  Int
//   token   Token    @relation(fields: [tokenId], references: [id])
//   tokenId Int
//   favDate DateTime @default(now())

//   @@id([userId, tokenId])
//   @@map("user_fav_tokens")
// }

// model Auction {
//   id         Int      @id @default(autoincrement())
//   token      Token    @relation(fields: [tokenId], references: [id])
//   tokenId    Int
//   start_date DateTime
//   end_date   DateTime
//   winner     User?    @relation("auction_winner", fields: [winnerId], references: [id])
//   winnerId   Int
//   owner      User     @relation("auction_owner", fields: [ownerId], references: [id])
//   ownerId    Int
//   bids       Bid[]

//   @@map("auctions")
// }

// model Bid {
//   id        Int     @id @default(autoincrement())
//   auction   Auction @relation(fields: [auctionId], references: [id])
//   auctionId Int
//   bidder    User    @relation(fields: [bidderId], references: [id])
//   bidderId  Int
//   amount    Float

//   @@map("bids")
// }

// model Transaction {

//   receiver   User @relation("transactionReceiver", fields: [receiverId], references: [id])
//   receiverId Int

//   sender   User @relation("transactionSender", fields: [senderId], references: [id])
//   senderId Int

//   token   Token @relation(fields: [tokenId], references: [id])
//   tokenId Int

//   amount Int
//   @@id([receiverId, senderId])
//   @@map("transactions")
// }

// enum TOKEN_TYPE {
//   ERC_721
//   ERC_1155
// }

// enum NFT_TYPE {
//   video
//   image
//   svg
//   gif
// }
